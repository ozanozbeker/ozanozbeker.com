{
  "hash": "53d9eb9843fec192bedf71b3b3777700",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"My R & RStudio Setup\"\ndescription: \"The code and the 'why' behind my setup, as well as some shoutouts.\"\ndate: \"2024-06-13\"\ncategories: [\"R\", \"RStudio\", \"Workstation\"]\nimage: ../resources/images/rstudio_logo.png\nexecute: \n  eval: false\n  cache: false\nformat:\n  html: \n    code-links:\n      - text: \"Repo\"\n        icon: github\n        href: https://github.com/ozanozbeker/r-and-rstudio-setup\n---\n\n\n\n# Intro\n\nThis is a hybrid blog post/README/code file where it is the actual code file I use when I update my R environment/computer, but also I wrote some descriptions along the way so if somebody else stumbles upon this and likes what they see, they can copy it or maybe even find something new that they didn't know about before.\n\n::: callout-note\nThe link to my GitHub repo is on the right panel. Feel free to fork and customize it for your use!\n:::\n\n# r-rstudio-setup.qmd\n\nFirst, we begin with this Quarto file that applies everything below. As I write this, it feels a little 4th wall breaking, but hey that's life üòé\n\n## Packages\n\nThese are the packages I most frequently use, loosely grouped into the categories below. This does not include dependency packages. So for example, I use `quarto` to render Quarto documents via R code, but I don't directly use the `markdown` package myself, so it is not listed below.\n\nYou can find the info page for each package at `https://cran.r-project.org/web/packages/[package_name]/index.html` where `[package_name]` is the name of the package.\n\n\n\n::: {.cell filename='r-and-rstudio-setup.qmd'}\n\n```{.r .cell-code}\ninstall.packages(c(\n  # Meta Packages\n  'tidyverse',  # Easily Install and Load the \"Tidyverse\" packages | https://tidyverse.tidyverse.org\n  'tidymodels', # Easily Install and Load the \"Tidymodels\" packages | https://tidymodels.tidymodels.org/\n  \n  # Programming & Development\n  'purrr',    # Functional Programming Tools | https://purrr.tidyverse.org/\n  'forcats',  # Tools for Working with Categorical Variables (Factors) | https://forcats.tidyverse.org/\n  'keyring',  # Package for accessing OS's credential store | https://keyring.r-lib.org/\n  'fs',       # Cross-Platform File System Operations Based on 'libuv' | https://fs.r-lib.org/\n\n  # Import\n  'readr',    # Read Rectangular Data | https://readr.tidyverse.org/\n  'httr2',    # Perform HTTP Requests and Process the Responses | https://httr2.r-lib.org/\n  'readxl',   # Read Excel Files | https://readxl.tidyverse.org/\n  'rvest',    # Easily Harvest (Scrape) Web Pages | https://rvest.tidyverse.org/\n  'jsonlite', # A Simple and Robust JSON Parser and Generator for R | https://jeroen.r-universe.dev/jsonlite\n  \n  # Tidy/Transform\n  'dplyr',     # A Grammar of Data Manipulation | https://dplyr.tidyverse.org/\n  'tidyr',     # Tidy Messy Data | https://tidyr.tidyverse.org/\n  'tibble',    # Simple Data Frames | https://tibble.tidyverse.org/\n  'stringr',   # Simple, Consistent Wrappers for Common String Operations | https://stringr.tidyverse.org/\n  'lubridate', # Make Dealing with Dates a Little Easier | https://lubridate.tidyverse.org/\n  'janitor',   # Simple Tools for Examining and Cleaning Dirty Data | https://sfirke.github.io/janitor/index.html \n\n  # Visualize\n  'ggplot2', # Create Elegant Data Visualizations Using the Grammar of Graphics | https://ggplot2.tidyverse.org/\n  \n  # Model\n  'rsample',   # General Re-sampling Infrastructure | https://rsample.tidymodels.org/\n  'parsnip',   # A Common API to Modeling and Analysis Functions | https://parsnip.tidymodels.org/\n  'recipes',   # Pre-processing and Feature Engineering Steps for Modeling | https://recipes.tidymodels.org/\n  'workflows', # Modeling Workflows | https://workflows.tidymodels.org/\n  'tune',      # Tidy Tuning Tools | https://tune.tidymodels.org/\n  'yardstick', # Tidy Characterizations of Model Performance | https://yardstick.tidymodels.org/\n  'broom',     # Convert Statistical Objects into Tidy Tibbles | https://broom.tidymodels.org/\n  'dials',     # Tools for Creating Tuning Parameter Values | https://dials.tidymodels.org/\n  'infer',     # Tidy Statistical Inference | https://infer.tidymodels.org/\n  'corrr',     # Correlations in R | https://corrr.tidymodels.org/\n  \n  # Communicate\n  'quarto', # R Interface to 'Quarto' Markdown Publishing System\n\n  # Database\n  'DBI',     # R Database Interface | https://dbi.r-dbi.org/index.html\n  'odbc',    # Connect to ODBC Compatible Databases (using the {DBI} Interface) | https://odbc.r-dbi.org/\n  'dbplyr',  # A {dplyr} Back End for Databases | https://dbplyr.tidyverse.org/\n  'duckdb',  # {DBI} Package for the DuckDB Database Management System | https://r.duckdb.org/\n  'duckplyr' # A DuckDB-backed Version of {dplyr} | https://duckdblabs.github.io/duckplyr/\n))\n\ninstall.packages(\n  \"rsthemes\",\n  repos = c(gadenbuie = 'https://gadenbuie.r-universe.dev', getOption(\"repos\"))\n)\n\nrsthemes::install_rsthemes()\n\n# Other packages I'm interested in:\n# 'profvis'  # Interactive Visualizations for Profiling R Code | https://rstudio.github.io/profvis/\n# 'targets'  # Pipelining Tools in R | https://docs.ropensci.org/targets/\n# 'testthat' # Unit Testing for R | https://testthat.r-lib.org\n# 'usethis'  # Automate Package and Project Setup | https://usethis.r-lib.org/\n# 'devtools' # Tools to Make Developing R Packages Easier | https://devtools.r-lib.org/\n# 'zoo'      # S3 Infrastructure for Regular and Irregular Time Series (Z's Ordered Observations) | https://zoo.R-Forge.R-project.org/\n```\n:::\n\n\n\nAfter these are installed, close and open RStudio again so that the addins from the packages also load.\n\n## RStudio Configuration\n\nAs I've been using R & RStudio, I've learned which settings I like the most, whether they are RStudio settings or R options, as well as some custom snippets. This section of code takes the respective files and copies them to where the base files for R and RStudioa are. I really created this because of my job where we log into different virtual machines, and I got sick of resetting all of these options by hand, so now I just pull this repo from GitHub and run the code.\n\nThe directories don't exist by default, they are created when you manually change the respective settings, so this chunk takes care of that, especially if it's a fresh install of RStudio.\n\n\n\n::: {.cell filename='r-and-rstudio-setup.qmd'}\n\n```{.r .cell-code}\npurrr::walk(\n  .x = c('themes', 'keybindings', 'snippets'),\n  .f = \\(directory) stringr::str_c(\"C:/Users/\", {Sys.info()[['user']]}, \"/AppData/Roaming/RStudio/\", directory) |> fs::dir_create()\n)\n```\n:::\n\n\n\nThen we copy the files from this folder to their appropriate locations.\n\n\n\n::: {.cell filename='r-and-rstudio-setup.qmd'}\n\n```{.r .cell-code}\npurrr::pwalk(\n  .l = tibble::tribble(\n    ~file,                   ~destination,\n    'rstudio_bindings.json',  stringr::str_glue(\"C:/Users/{Sys.info()[['user']]}/AppData/Roaming/RStudio/keybindings/rstudio_bindings.json\"),\n    'addins.json',            stringr::str_glue(\"C:/Users/{Sys.info()[['user']]}/AppData/Roaming/RStudio/keybindings/addins.json\"),\n    'r.snippets',             stringr::str_glue(\"C:/Users/{Sys.info()[['user']]}/AppData/Roaming/RStudio/snippets/r.snippets\"),\n    'rstudio-prefs.json',     stringr::str_glue(\"C:/Users/{Sys.info()[['user']]}/AppData/Roaming/RStudio/rstudio-prefs.json\"),\n    '.Rprofile',              stringr::str_glue(\"C:/Users/{Sys.info()[['user']]}/Documents/.Rprofile\")),\n  .f = \\(file, destination) fs::file_copy(path = file, new_path = destination, overwrite = TRUE)\n)\n```\n:::\n\n\n\n## R Themes\n\nI hate that when you use dark mode in RStudio, it's just this dark blue shade for the UI, not actually dark/black. Also, I'm really not a fan of any of the themes that come with RStudio. To some extent, I think [Garrick Aden-Buie](https://www.garrickadenbuie.com/) also agreed with my sentiment and created this awesome package, [{rsthemes}](https://www.garrickadenbuie.com/project/rsthemes/).\n\n### {rthemes}\n\nThis package comes with a bunch of awesome themes that complete change the way RStudio looks and feels, and I would recommend it to anybody looking to modernize their RStudio interface. You can see the usage in the docs, and the settings I'm using in my `.Rprofile`, which I talk about below.\n\nRight now, I really like the `Elm light` and `Elm dark` themes, and I switch between the two depending on the brightness of the room.\n\n### {darkstudio}\n\nI'm now using the {rsthemes} package, but I have to give a huge shoutout to GitHub user [rileytwo](https://github.com/rileytwo). I used rileytwo's work below for more than a year, and I can't not shout it out.\n\n-   [{darkstudio}](https://github.com/rileytwo/darkstudio) is a package that turns the IDE elements to shades of black whenever you are using a theme with `rs-theme-is-dark: TRUE`.\n-   [Kiss: Keep It Stupid Simple](https://github.com/rileytwo/kiss) is a theme from Riley that just looks so good, it's been my go to for over a year now.\n\nIf either of these interest you, please go check them out. They were a staple to my R experience and I would like to support the creator as best as I can.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github('rileytwo/darkstudio')\ndarkstudio::activate() # This requires admin privileges\n```\n:::\n\n\n\n# .Rprofile\n\nThe `.Rprofile` file is an R script that runs each time R starts up that lets you to customize your R environment. It can be used to set global options, load packages, define functions, and customize the R startup process. Or in my case, have some fun üòÅ\n\n## Options\n\n`options()` lets you set the global options for R. All of them have a default, and these are the ones I've changed for my preference. You can use `?options` to view the full list.\n\n\n\n::: {.cell filename='.Rprofile'}\n\n```{.r .cell-code}\noptions(\n  scipen = 999999,               # A penalty to be applied to turning regular values to scientific notation\n  setWidthOnResize = TRUE,       # If set and TRUE, the terminal resize when the terminal pane is resized\n  useFancyQuotes = FALSE,        # Turn off fancy quotes\n  warn = 1,                      # Prints warnings as they happen instead of when the top function ends.\n  warnPartialMatchArgs = TRUE,   # Warns if partial matching is used in argument matching.\n  warnPartialMatchAttr = TRUE,   # Warns if partial matching is used in extracting attributes via attr.\n  warnPartialMatchDollar = TRUE, # Warns if partial matching is used for extraction by $.\n  prompt = 'R> ',                # This is complete personal preference\n  continue = '+> ',              # This is complete personal preference\n  rsthemes.theme_light = \"Elm light {rsthemes}\",\n  rsthemes.theme_dark = \"Elm dark {rsthemes}\",\n  rsthemes.theme_favorite = \"Elm dark {rsthemes}\"\n)\n```\n:::\n\n\n\n## R Completion Options\n\nThe `rc.settings` function is part of the utils package in R, which configures settings for the R completion mechanism. It can enable or disable specific completion features like inter-package completion, function argument completion, and fuzzy matching. You can use `?rc.settings` to view the full list.\n\n1.  `ipck` (Inter-Package Completion):\n\n    -   Description: This option enables or disables completion of object names across all loaded packages.\n    -   Explanation: If you work with multiple packages, you can quickly access functions and objects from any loaded package without having to remember which package they belong to.\n\n2.  `func` (Function Argument Completion):\n\n    -   Description: This option enables or disables completion of function argument names.\n    -   Explanation: This helps you to write function calls more efficiently by providing argument suggestions, reducing the need to look up function documentation frequently.\n\n3.  `fuzzy` (Fuzzy Matching):\n\n    -   Description: This option enables or disables fuzzy matching for completion.\n    -   Explanation: This is useful when you cannot recall the exact name of a function or object. Fuzzy matching will suggest completions that closely resemble what you have typed, saving time and reducing frustration.\n\nIn short, the more help I can get coding, the better üòÅ\n\n\n\n::: {.cell filename='.Rprofile'}\n\n```{.r .cell-code}\nrc.settings(ipck = TRUE, func = TRUE, fuzzy = TRUE)\n```\n:::\n\n\n\n## Interactive Sessions\n\nYou can use this code section if you want things to enable in an interactive session, like auto-loading certain packages. Some people use it to load packages that they always use, like `tidyverse`, `usethis`, `devtools`, and so on, but I'm in the camp that every script should be very explicit in what packages are being used, so I use this feature to have some fun.\n\nIf in an interactive session, this code will output my message in the console everytime R starts. I've always wanted my own [J.A.R.V.I.S.](https://en.wikipedia.org/wiki/J.A.R.V.I.S.), R is close enough ü•≤\n\n\n\n::: {.cell filename='.Rprofile'}\n\n```{.r .cell-code}\nif (interactive()) {\n  message(\"Welcome Mr. Ozbeker, how may I be of assistance?\")\n}\n```\n:::\n\n\n\n# r.snippets & rstudio_bindings.json\n\nRStudio lets you add custom snippets (pieces of code that can be quickly inserted, useful for repetitive code) and key bindings that can really help your code flow if you use them. For both files, I only added one thing, but they've really improved my coding experience.\n\n\n\n::: {.cell filename='r.snippets'}\n\n```{.r .cell-code}\nsnippet user\n  user = Sys.info()[['user']]\n```\n:::\n\n::: {.cell filename='rstudio_bindings.json'}\n\n```{.json .cell-code}\n{\n    \"insertPipeOperator\": \"Ctrl+\\\\\"\n}\n```\n:::\n\n\n\nRStudio uses a separate file for key bindings for addins, and the {rsthemes} package comes with a feature for toggling from light and dark modes, and a recommended key binding to follow:\n\n\n\n::: {.cell filename='addins.json'}\n\n```{.json .cell-code}\n{\n    \"rsthemes::use_theme_toggle\": \"Ctrl+Alt+D\"\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}